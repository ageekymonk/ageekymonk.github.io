<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Life, My Code]]></title>
  <link href="http://ageekymonk.github.io/atom.xml" rel="self"/>
  <link href="http://ageekymonk.github.io/"/>
  <updated>2014-06-05T08:56:01+10:00</updated>
  <id>http://ageekymonk.github.io/</id>
  <author>
    <name><![CDATA[Ramz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Selenium Snippets]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/06/05/selenium-snippets/"/>
    <updated>2014-06-05T08:54:36+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/06/05/selenium-snippets</id>
    <content type="html"><![CDATA[<p>A sample code for testing highcharts and kendoUI</p>

<pre><code>import java.util.Iterator;
import java.util.List;

import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.support.ui.Select;

public class Test2 {
private WebDriver driver;
private String baseUrl;
public void test1() throws Exception {
driver = new FirefoxDriver();
driver.get("file:///E:/telerik.kendoui.professional.2014.1.528.trial/index.html");
WebElement firstDropDown = driver.findElement(By.cssSelector("span.k-widget"));
firstDropDown.click();
List&lt;WebElement&gt; options = driver.findElements(By.cssSelector("div.k-list-container ul.k-list li.k-item"));

for (Iterator&lt;WebElement&gt; iterator = options.iterator(); iterator.hasNext();) {
WebElement webElement = (WebElement) iterator.next();
if (webElement.getText().equals("Orange"))
webElement.click();
}

driver.wait(5000);
driver.quit();
}
public void test2() throws Exception {
driver = new FirefoxDriver();
driver.get("http://www.highcharts.com/demo/pie-basic");

List&lt;WebElement&gt; options = driver.findElements(By.cssSelector("g"));

for (Iterator&lt;WebElement&gt; iterator = options.iterator(); iterator.hasNext();) {
WebElement webElement = (WebElement) iterator.next();
try
{
if (webElement.findElement(By.cssSelector("text tspan")).getText().equals("IE"))
webElement.click();
}
catch (NoSuchElementException e){}
}

driver.wait(5000);
driver.quit();
}
public static void main(String[] args) throws Exception {
Test2 a = new Test2();
a.test2();

}

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Iptables]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/06/02/understanding-iptables/"/>
    <updated>2014-06-02T16:41:19+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/06/02/understanding-iptables</id>
    <content type="html"><![CDATA[<p>Why do we need iptables ?</p>

<ol>
<li>To filter packets both entering / leaving.</li>
<li>To alter the packets for source and destination NAT</li>
</ol>


<p><img class="center" src="http://ageekymonk.github.io/images/iptables.png"></p>

<p>To understand the basics of iptables, lets understand the terminologies first.</p>

<ol>
<li>Tables</li>
<li>Chains</li>
<li>Rules</li>
</ol>


<p>  Tables contains Chains. Chains contains rules.</p>

<p>There are 4 default tables.
1. Filter</p>

<pre><code>This table is used to filter packets. The filtering rules can do the following ...
a. If the packets can enter layer 4 and above
    Example: Filter port 80 traffic destined to this machine.
b. If the packet are allowed to leave the system
    Example: Block all port 80 traffic from this machine to another machine
c. If the packet can be forwarded.
    Example: If we have multiple interfaces say eth0 and eth1. Can traffic received from eth0 be forwarded to eth1 or nto.
</code></pre>

<ol>
<li><p>nat
 This table is to change the ip addresses. so that the private network can access the public network and viceversa</p></li>
<li><p>mange</p></li>
<li>raw</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Coovachilli Without Radius Server]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/05/23/setup-coovachilli-without-radius-server/"/>
    <updated>2014-05-23T15:00:45+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/05/23/setup-coovachilli-without-radius-server</id>
    <content type="html"><![CDATA[<p>Coovachilli can be configured to run without a Radius Server. To facilitate this coovachilli comes with inbuilt
Radius Proxy. All HTTP requests by the proxy have a User-Agent HTTP header of &ldquo;CoovaChilli (version)&rdquo;.</p>

<p>The Radius request is converted to <a href="http://your-provided-url/?key1=value1&amp;key2=value2">http://your-provided-url/?key1=value1&amp;key2=value2</a>
For example</p>

<pre><code>    http://localhost/script.php?stage=login&amp;service=login&amp;user=test&amp;pass=test
    &amp;ap=00-XX-XX-XX-XX-XX&amp;mac=00-XX-XX-XX-XX-XX&amp;ip=10.1.0.2&amp;sessionid=4adb5f4000000001
    &amp;nasid=nas01&amp;md=A9EA5F98B104F41FC330CFE44B2681AD
</code></pre>

<p>The key/values are radius query parameters and their values.</p>

<p>The expected response by the proxy is empty HTML File with value Auth: 1 for authentication success and
Auth: 0 for failure.</p>

<p>The following PHP code responds with Authentication success for the request.</p>

<pre><code>&lt;?php
    echo "Auth: 1"
?&gt;
</code></pre>

<p>The following PHP code responds with Authentication Failure for the request.</p>

<pre><code>&lt;?php
    echo "Auth: 0"
?&gt;
</code></pre>

<p><em>Configuration:</em></p>

<ol>
<li><p>Add the following lines to your /etc/chilli/defaults file.</p>

<pre><code> HS_AAA=http
 HS_UAMAAAURL=http://your-web-site-url/somepage.php
</code></pre></li>
</ol>


<p>With this change, you no longer need to setup a radius server but run a webserver which can process the received request
and respond back with success or failure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Master in the Art of Living]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/05/20/master-in-the-art-of-living/"/>
    <updated>2014-05-20T16:54:58+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/05/20/master-in-the-art-of-living</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://ageekymonk.github.io/images/the_master_in_the_art_of_living.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make USB Bootable Disk From ISO File in Mac/OSX]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/05/20/make-usb-bootable-disk-from-iso-file/"/>
    <updated>2014-05-20T12:51:51+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/05/20/make-usb-bootable-disk-from-iso-file</id>
    <content type="html"><![CDATA[<p>Convert iso file to img</p>

<pre><code>hdiutil convert -format UDRW -o ~/path/to/target.img ~/path/to/ubuntu.iso
</code></pre>

<p>Insert the usb drive. Find the device number using</p>

<pre><code>diskutil list
</code></pre>

<p>Load the image to the right device. <em>(Replace N with the disk number from the last command)</em></p>

<pre><code>diskutil unmountDisk /dev/diskN 

sudo dd if=/path/to/downloaded.img of=/dev/rdiskN bs=1m

diskutil eject /dev/diskN
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Man in the Arena]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/05/20/man-in-the-arena/"/>
    <updated>2014-05-20T10:32:22+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/05/20/man-in-the-arena</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://ageekymonk.github.io/images/the-man-in-the-arena.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UnPackaging Debian Source Package]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/05/19/unpackaging-debian-source-package/"/>
    <updated>2014-05-19T11:25:23+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/05/19/unpackaging-debian-source-package</id>
    <content type="html"><![CDATA[<p>If you have downloaded debian source package manually using wget, the easier way to unpackage is to use dpkg-source. Because it is not just untaring and placing the debian folder in the source folder. There might be some extra patches that need to be applied.</p>

<p>For any debian package, there will be three files</p>

<pre><code>1. package_name.dsc
2. package_name.orig.tar.gz
3. package_name.debian.tar.gz
</code></pre>

<p>To unpackage</p>

<pre><code>dpkg-source -x package_name.dsc
</code></pre>

<h5>Example:</h5>

<p>For squidguard package</p>

<pre><code>squidguard_1.5-1.dsc
squidguard_1.5.orig.tar.gz
squidguard_1.5-1.debian.tar.gz
</code></pre>

<p>To unpackage</p>

<pre><code>dpkg-source -x squidguard_1.5-1.dsc
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash: Extract Filename From Url / Pathname]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/05/19/extract-filename-from-url-slash-path/"/>
    <updated>2014-05-19T10:52:42+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/05/19/extract-filename-from-url-slash-path</id>
    <content type="html"><![CDATA[<p>Bash provides builtin functions to extract part of string.</p>

<h5>Some string manipulation operators are</h5>

<pre><code>1. '#' remove minimal matching prefixes
2. '##' remove maximal matching prefixes
3. '%' remove minimal matching suffixes
4. '%%' remove maximal matching suffixes
</code></pre>

<h5>Example1:</h5>

<pre><code>FN=/home/chaos/squidguard_1.5-1.dsc
echo ${FN##/*/} -&gt; Prints squidguard_1.5-1.dsc
echo ${FN#/*/}  -&gt; Prints chaos/squidguard_1.5-1.dsc
echo ${FN%/*}   -&gt; Prints /home/chaos
echo ${FN%%/*}  -&gt; Prints none. As it removes everything from first / till end. 
</code></pre>

<h5>Example2:</h5>

<pre><code>URL=http://ftp.de.debian.org/debian/pool/main/s/squidguard/squidguard_1.5-1.dsc
echo ${URL##*/} -&gt; Prints squidguard_1.5-1.dsc
echo ${URL#*//} -&gt; Prints ftp.de.debian.org/debian/pool/main/s/squidguard/squidguard_1.5-1.dsc
echo ${URL%/*}  -&gt; Prints http://ftp.de.debian.org/debian/pool/main/s/squidguard
echo ${URL%%/*} -&gt; Prints http:
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cscope Plugin for Sublime Text]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/05/17/cscope-plugin-for-sublime-text/"/>
    <updated>2014-05-17T09:28:17+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/05/17/cscope-plugin-for-sublime-text</id>
    <content type="html"><![CDATA[<p> For browsing large c/c++ code base, the best way is to use cscope. To integrate cscope with sublime text, we need a plugin called CscopeSublime</p>

<h5>Installation</h5>

<ol>
<li><p> Go to Preferences &ndash;> Package Control</p></li>
<li><p> Select: Install Package</p></li>
<li><p> Select: cscope</p></li>
</ol>


<h5>Configuration</h5>

<ol>
<li><p> To set the cscope path, Select &ldquo;Preferences &ndash;> Settings User&rdquo;, this will open preferences.sublime-settings file. Add the following line in that file.</p>

<pre><code>"CscopeSublime_executable": "/usr/local/bin/cscope"
</code></pre></li>
</ol>


<h5>Using in your project</h5>

<ol>
<li><p> Create Cscope Database at the root of the project</p>

<pre><code>find . -name "*" -print &gt; cscope.files

cscope -b -q
</code></pre></li>
</ol>


<p>  Now you are all set to go</p>

<h5>shortcuts</h5>

<pre><code>    command panel:  Ctrl + \ 
    Look up symbol: Ctrl + L  Ctrl + S
    Symbol Definition: Ctrl + L Ctrl + D
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoovaChilli: Setting Up MAC Based Authentication]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/05/17/coovachilli-setting-up-mac-based-authentication/"/>
    <updated>2014-05-17T09:17:21+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/05/17/coovachilli-setting-up-mac-based-authentication</id>
    <content type="html"><![CDATA[<p>  Coovachilli supports MAC Based authentication. It supports static list which could be configured at start time.</p>

<p> System Configuration:</p>

<p>OS                : Ubuntu 13.10</p>

<p>Coovachilli  : 1.3.1</p>

<p>Edit the configuration file in location /etc/chilli/defaults</p>

<pre><code>               HS_MACAUTHMODE=local

               HS_MACALLOW="00-11-22-33-44-55" 
</code></pre>

<p>Change the mac address with your required ones.</p>

<p>If you want to add multiple mac address, separate them by commas.</p>

<pre><code>HS_MACALLOW="00-11-22-33-44-55, 22-22-22-22-22-22"
</code></pre>
]]></content>
  </entry>
  
</feed>
