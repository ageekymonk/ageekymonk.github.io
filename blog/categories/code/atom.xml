<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | My Life, My Code]]></title>
  <link href="http://ageekymonk.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://ageekymonk.github.io/"/>
  <updated>2014-06-30T16:47:39+10:00</updated>
  <id>http://ageekymonk.github.io/</id>
  <author>
    <name><![CDATA[Ramz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Abstracting ConfigParser as a Dictionary]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/06/30/abstracting-configparser-as-a-dictionary/"/>
    <updated>2014-06-30T16:35:09+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/06/30/abstracting-configparser-as-a-dictionary</id>
    <content type="html"><![CDATA[<p>When we are parsing the config file which has only one section, to get a particular config in a file we have to
specify config.get(&lsquo;default&rsquo;, &lsquo;key1&rsquo;). This looks little cumbersome if you have to do too many times.</p>

<p>``` python
import ConfigParser
config = ConfigParser.ConfigParser()
config.read(config_file)</p>

<p>value1 = config.get(&lsquo;default&rsquo;, &lsquo;key1&rsquo;)
value2 = config.get(&lsquo;default&rsquo;, &lsquo;key2&rsquo;)
value3 = config.get(&lsquo;default&rsquo;, &lsquo;key3&rsquo;)
```</p>

<p>To avoid this we can abstract this as a dictionary. This way it provides better readability too.</p>

<p>``` python Abstracting configparser as a dict</p>

<pre><code>class AppConfig(dict):
    def __init__(self,fn, *args):
        self.config = ConfigParser.ConfigParser()
        self.config.read(fn)
        dict.__init__(self,args)

    def __getitem__(self, key):
        try:
            val = self.config.get('default', key)
        except:
            val = dict.__getitem__(self, key)
        return val


myconfig = AppConfig(config_file)

value1 = myconfig['key1']
value2 = myconfig['key2']
value3 = myconfig['key3']
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simulating Multiple Devices With Different Mac From a Single PC]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/06/26/simulating-multiple-devices-with-different-mac-from-a-single-pc/"/>
    <updated>2014-06-26T09:44:48+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/06/26/simulating-multiple-devices-with-different-mac-from-a-single-pc</id>
    <content type="html"><![CDATA[<p>If we want to simulate multiple devices (say about 1000) , each with its own mac and send TCP traffic, or any kind of traffic from it,
the best way is to use macvlan</p>

<p>To create a macvlan interface, follow the screencast.</p>

<iframe src="http://showterm.io/26596f68595a3afdd21ad" width="1280" height="960"></iframe>


<p>Once we have the interface we can send traffic using any socket programming to do so.
A sample way to send tcp traffic through an interface <strong>eth0.1</strong> created above to connect to example.com to port 5555.</p>

<pre><code>    import socket
    import IN

    # Create a tcp socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Bind the socket to an interface so that the traffic will flow through that. Otherwise eth0 will be used.
    s.setsockopt(socket.SOL_SOCKET, IN.SO_BINDTODEVICE, "eth0.1")
    s.connect(('example.com',5555))
    s.send("hello")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Service to Run at Startup in Debian]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/06/23/configure-service-to-run-at-startup-in-debian/"/>
    <updated>2014-06-23T15:20:45+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/06/23/configure-service-to-run-at-startup-in-debian</id>
    <content type="html"><![CDATA[<ol>
<li><p>To configure a service say squid to run at startup</p>

<pre><code> update-rc.d squid3 defaults
</code></pre></li>
<li><p>To Remove a service which is running at startup</p>

<pre><code> updatd-rc.d -f squid3 remove
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Htop: A Better Top]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/06/22/htop-a-better-top/"/>
    <updated>2014-06-22T15:19:23+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/06/22/htop-a-better-top</id>
    <content type="html"><![CDATA[<p>Htop provides easier way to kill a process, sort, display as tree. A sample screenshot of how it looks, on my Macbook Pro.</p>

<p><img class="center" src="/images/htop.png"></p>

<iframe src="http://showterm.io/e7519ac15bdd07915138b" width="1280" height="960"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rsync Your Folder With Remote Machine Continuously]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/06/13/rsync-your-folder-with-remote-machine-continuously/"/>
    <updated>2014-06-13T09:45:45+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/06/13/rsync-your-folder-with-remote-machine-continuously</id>
    <content type="html"><![CDATA[<p>I make code changes locally. And i need to put it in remote machine to test it. For doing so i needed to run rsync manually every time.
To avoid this</p>

<ol>
<li><p>Install watchdog.</p>

<pre><code> pip install watchdog
</code></pre></li>
<li><p>Setup passwordless login for your ssh. Follow the steps specified in <a href="http://www.tecmint.com/ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps/">this site</a></p></li>
<li><p>Run the following command to sync your current folder to remote machine.</p>

<pre><code> watchmedo shell-command --patterns="*" --recursive --command 'rsync -avz . -e ssh private@private:privateFolder'
</code></pre></li>
</ol>


<p>Voila &hellip; Its done.</p>
]]></content>
  </entry>
  
</feed>
