<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | My Life, My Code]]></title>
  <link href="http://ageekymonk.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://ageekymonk.github.io/"/>
  <updated>2014-07-12T17:49:34+10:00</updated>
  <id>http://ageekymonk.github.io/</id>
  <author>
    <name><![CDATA[Ramz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim: Save an Opened File as a Root User]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/07/12/vim-save-an-opened-file-as-a-root-user/"/>
    <updated>2014-07-12T17:38:21+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/07/12/vim-save-an-opened-file-as-a-root-user</id>
    <content type="html"><![CDATA[<p>Almost every time i forget to open vim as sudo user, that are supposed to be edited by root and make changes.
And finally when saving you see one of the most dreaded message &ldquo;readonly option is set (add ! to override)&rdquo;.</p>

<p>To save the file without losing all the editing that you have done use the following command</p>

<pre><code>    :w !sudo tee %
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python: Understanding __getitem__, __setitem__ and __delitem__]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/07/06/python-understanding-getitem/"/>
    <updated>2014-07-06T16:46:37+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/07/06/python-understanding-getitem</id>
    <content type="html"><![CDATA[<p>In C++, we can overload the [] operators. Python also supports [] overloading but it is done via overriding <code>__getitem__</code>, <code>__setitem__</code>
for reading and writing respectively.</p>

<p><code>__setitem__</code> creates a new element if it does not exist.
Once created, What if we need to remove the element entirely. Thats why <code>__delitem__</code> is for.</p>

<p>Below is a class which behaves like a dictionary as well as a class.</p>

<p>``` python</p>

<p>class DictLikeClass:</p>

<pre><code>def __init__(self):
    pass

def __getitem__(self, key):
    print "Getting Item " + key + " =&gt; ",
    if not self.__dict__.has_key(key):
        print "No such key "+ key + ", so returning None =&gt;",
    else:
        return self.__dict__[key]

def __setitem__(self, key, value):
    print "Setting Item " + key + " with value " + str(value)
    self.__dict__[key] = value

def __delitem__(self, key):
    print "Deleting Item " + key
    del self.__dict__[key]
</code></pre>

<p>inst = DictLikeClass()</p>

<p>print inst[&lsquo;x&rsquo;]</p>

<p>inst[&lsquo;x&rsquo;] = 10
print inst[&lsquo;x&rsquo;]
print inst.x</p>

<p>del inst[&lsquo;x&rsquo;]
print inst[&lsquo;x&rsquo;]</p>

<p>```</p>

<p><em>The output for this is</em></p>

<pre><code>    Getting Item x =&gt;  No such key x, so returning None =&gt; None
    Setting Item x with value 10
    Getting Item x =&gt;  10
    10
    Deleting Item x
    Getting Item x =&gt;  No such key x, so returning None =&gt; None
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter: Adding Beanshell Script for Extracting URL]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/06/30/jmeter-adding-beanshell-script-for-extracting-url/"/>
    <updated>2014-06-30T16:58:52+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/06/30/jmeter-adding-beanshell-script-for-extracting-url</id>
    <content type="html"><![CDATA[<p>The following code will extract from the response which has redirect url, port and path
and put as a variable with name redirect_url, redirect_port, redirect_path. This can be used in jmeter to redirect to
next page.</p>

<p>``` java</p>

<pre><code>import java.util.regex;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
String response = new String(prev.getResponseHeaders());

Pattern r = Pattern.compile(“Location:\\s+http://([^:]+):(\\d+)(.*)”);
Matcher m = r.matcher(response);

if (m.find())
{
vars.put(“redirect_url”, m.group(1));
vars.put(“redirect_port”,m.group(2));
vars.put(“redirect_path”,m.group(3));
}
else
{
        vars.put(“redirect_url”,”www.google.com”);
        vars.put(“redirect_port”, “80”);
        vars.put(“redirect_path”, “/“);
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abstracting ConfigParser as a Dictionary]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/06/30/abstracting-configparser-as-a-dictionary/"/>
    <updated>2014-06-30T16:35:09+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/06/30/abstracting-configparser-as-a-dictionary</id>
    <content type="html"><![CDATA[<p>When we are parsing the config file which has only one section, to get a particular config in a file we have to
specify config.get(&lsquo;default&rsquo;, &lsquo;key1&rsquo;). This looks little cumbersome if you have to do too many times.</p>

<p>``` python
import ConfigParser
config = ConfigParser.ConfigParser()
config.read(config_file)</p>

<p>value1 = config.get(&lsquo;default&rsquo;, &lsquo;key1&rsquo;)
value2 = config.get(&lsquo;default&rsquo;, &lsquo;key2&rsquo;)
value3 = config.get(&lsquo;default&rsquo;, &lsquo;key3&rsquo;)
```</p>

<p>To avoid this we can abstract this as a dictionary. This way it provides better readability too.</p>

<p>``` python Abstracting configparser as a dict</p>

<pre><code>class AppConfig(dict):
    def __init__(self,fn, *args):
        self.config = ConfigParser.ConfigParser()
        self.config.read(fn)
        dict.__init__(self,args)

    def __getitem__(self, key):
        try:
            val = self.config.get('default', key)
        except:
            val = dict.__getitem__(self, key)
        return val


myconfig = AppConfig(config_file)

value1 = myconfig['key1']
value2 = myconfig['key2']
value3 = myconfig['key3']
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simulating Multiple Devices With Different Mac From a Single PC]]></title>
    <link href="http://ageekymonk.github.io/blog/2014/06/26/simulating-multiple-devices-with-different-mac-from-a-single-pc/"/>
    <updated>2014-06-26T09:44:48+10:00</updated>
    <id>http://ageekymonk.github.io/blog/2014/06/26/simulating-multiple-devices-with-different-mac-from-a-single-pc</id>
    <content type="html"><![CDATA[<p>If we want to simulate multiple devices (say about 1000) , each with its own mac and send TCP traffic, or any kind of traffic from it,
the best way is to use macvlan</p>

<p>To create a macvlan interface, follow the screencast. Use the steps below to create &ldquo;n&rdquo; number of interface, each with its own mac address.</p>

<iframe src="http://showterm.io/26596f68595a3afdd21ad" width="1280" height="960"></iframe>


<p>Once we have the interface we can send traffic using any socket programming to do so.
A sample way to send tcp traffic through an interface <strong>eth0.1</strong> created above to connect to example.com to port 5555.</p>

<pre><code>    import socket
    import IN

    # Create a tcp socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Bind the socket to an interface so that the traffic will flow through that. Otherwise eth0 will be used.
    s.setsockopt(socket.SOL_SOCKET, IN.SO_BINDTODEVICE, "eth0.1")
    s.connect(('example.com',5555))
    s.send("hello")
</code></pre>
]]></content>
  </entry>
  
</feed>
